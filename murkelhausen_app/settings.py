"""
Django settings for murkelhausen_app project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO__SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DJANGO__DEBUG", "False"))

ALLOWED_HOSTS = os.environ.get("DJANGO__ALLOWED_HOSTS", "127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "statements.apps.StatementsConfig",
    "trainer.apps.TrainerConfig",
    "murkelhausen_info.apps.MurkelhausenInfoConfig",
    "murkelhausen_info.templatetags.mathtags",
    "murkelhausen_info.templatetags.weathertags",
    "chat.apps.ChatConfig",
    "pages.apps.PagesConfig",
    "django_tables2",
    "django_bootstrap5",
    "django_filters",
    "markdownify.apps.MarkdownifyConfig",
    "fontawesomefree",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "murkelhausen_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "pages.views.get_murkelhausen_version",
            ],
        },
    },
]

WSGI_APPLICATION = "murkelhausen_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "192.168.1.69",
        "USER": os.environ.get("POSTGRES_USER"),
        "DBNAME": os.environ.get("POSTGRES_DBNAME"),
        "PORT": 5432,
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "TIME_ZONE": "Europe/Berlin",
        "NAME": os.environ.get("POSTGRES_DBNAME"),
    },
    "data": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "192.168.1.69",
        "USER": os.environ.get("POSTGRES_USER"),
        "DBNAME": "murkelhausen_datastore",
        "OPTIONS": {"options": "-c search_path=report"},
        "PORT": 5432,
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "TIME_ZONE": "Europe/Berlin",
        "NAME": "murkelhausen_datastore",
    },
}

DATABASE_ROUTERS = ["murkelhausen_info.routers.MurkelhausenInfoRouter"]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "de-DE"

TIME_ZONE = "UTC"

USE_L10N = False
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MARKDOWNIFY = {
    "default": {
        "MARKDOWN_EXTENSIONS": [
            "fenced_code",
            "attr_list",
            # "codehilite", # TODO  https://python-markdown.github.io/extensions/code_hilite/
        ],
        "MARKDOWN_EXTENSION_CONFIGS": {
            "fenced_code": {
                "lang_prefix": "python-",
            }
        },
        "BLEACH": False,  # TODO replace by a correct bleach config
    }
}

TRAINER_LAST_N = 5
TRAINER_RANDOM_OFFSET = 0.2
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "base": {
            "format": "%(asctime)s [%(levelname)s] %(name)s - %(message)s",
        },
        "routes": {
            "format": "%(asctime)s - %(message)s",
        },
    },
    "handlers": {
        "base": {
            "class": "logging.StreamHandler",
            "formatter": "base",
        },
        "routes": {
            "class": "logging.StreamHandler",
            "formatter": "routes",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["routes"],
            "level": "INFO",
            "propagate": False,
        },
        "root": {
            "handlers": ["base"],
            "level": "INFO",
        },
    },
}
