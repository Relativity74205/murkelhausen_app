# generated by datamodel-codegen:
#   filename:  owm.json
#   timestamp: 2023-11-04T22:08:55+00:00

from __future__ import annotations

from datetime import datetime, date

from pydantic import BaseModel, Field


class WeatherItem(BaseModel):
    id: int  # https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2
    main: str
    description: str
    icon: str  # see https://openweathermap.org/weather-conditions#How-to-get-icon-URL


class Current(BaseModel):
    dt: int
    sunrise: int
    sunset: int
    temp: float
    feels_like: float
    pressure: int
    humidity: int
    dew_point: float
    uvi: float  # Current UV index
    clouds: int
    visibility: int
    wind_speed: float
    wind_deg: int
    rain: dict[str, float] | None = None
    snow: dict[str, float] | None = None
    weather: tuple[WeatherItem, ...]

    @property
    def timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.dt)

    @property
    def sunrise_timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.sunrise)

    @property
    def sunset_timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.sunset)


class MinutelyItem(BaseModel):
    dt: int
    precipitation: float

    @property
    def timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.dt)


class Rain(BaseModel):
    field_1h: float = Field(..., alias="1h")


class HourlyItem(BaseModel):
    dt: int
    temp: float
    feels_like: float
    pressure: int
    humidity: int
    dew_point: float
    uvi: float
    clouds: int
    visibility: int
    wind_speed: float
    wind_deg: int
    wind_gust: float
    weather: tuple[WeatherItem, ...]
    pop: float
    rain: Rain | None = None


class Temp(BaseModel):
    day: float
    min: float
    max: float
    night: float
    eve: float
    morn: float


class FeelsLike(BaseModel):
    day: float
    night: float
    eve: float
    morn: float


class DailyItem(BaseModel):
    dt: int
    sunrise: int
    sunset: int
    moonrise: int
    moonset: int
    moon_phase: float
    summary: str
    temp: Temp
    feels_like: FeelsLike
    pressure: int
    humidity: int
    dew_point: float
    wind_speed: float
    wind_deg: int
    wind_gust: float
    weather: tuple[WeatherItem, ...]
    clouds: int
    pop: float
    rain: float | None = None
    snow: float | None = None
    uvi: float

    @property
    def day(self) -> date:
        return date.fromtimestamp(self.dt)

    @property
    def sunrise_timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.sunrise)

    @property
    def sunset_timestamp(self) -> datetime:
        return datetime.fromtimestamp(self.sunset)


class Alert(BaseModel):
    sender_name: str
    event: str
    start: int
    end: int
    description: str
    tags: tuple[str, ...]

    @property
    def start_timestamp(self):
        return datetime.fromtimestamp(self.start)

    @property
    def end_timestamp(self):
        return datetime.fromtimestamp(self.end)


class OWMOneCall(BaseModel):
    lat: float
    lon: float
    timezone: str
    timezone_offset: int
    current: Current
    minutely: tuple[MinutelyItem, ...]
    hourly: tuple[HourlyItem, ...]
    daily: tuple[DailyItem, ...]
    alerts: tuple[Alert, ...]
